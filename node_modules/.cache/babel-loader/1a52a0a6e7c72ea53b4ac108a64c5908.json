{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Edwin\\\\Documents\\\\GitHub\\\\Bacadlo _original files\\\\bacadlo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React from\"react\";var useResizeObserver=function useResizeObserver(ref){var _React$useState=React.useState(null),_React$useState2=_slicedToArray(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){var observeTarget=ref.current;var resizeObserver=new ResizeObserver(function(entries){entries.forEach(function(entry){setDimensions(entry.contentRect);});});resizeObserver.observe(observeTarget);return function(){resizeObserver.unobserve(observeTarget);};},[ref]);return dimensions;};export default useResizeObserver;","map":{"version":3,"sources":["C:/Users/Edwin/Documents/GitHub/Bacadlo _original files/bacadlo/src/hooks/useResizeObserver.js"],"names":["React","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":"iMAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,GAAD,CAAS,qBACGF,KAAK,CAACG,QAAN,CAAe,IAAf,CADH,oDAC1BC,UAD0B,qBACdC,aADc,qBAEjCL,KAAK,CAACM,SAAN,CAAgB,UAAM,CACpB,GAAMC,CAAAA,aAAa,CAAGL,GAAG,CAACM,OAA1B,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,cAAJ,CAAmB,SAACC,OAAD,CAAa,CACrDA,OAAO,CAACC,OAAR,CAAgB,SAACC,KAAD,CAAW,CACzBR,aAAa,CAACQ,KAAK,CAACC,WAAP,CAAb,CACD,CAFD,EAGD,CAJsB,CAAvB,CAKAL,cAAc,CAACM,OAAf,CAAuBR,aAAvB,EACA,MAAO,WAAM,CACXE,cAAc,CAACO,SAAf,CAAyBT,aAAzB,EACD,CAFD,CAGD,CAXD,CAWG,CAACL,GAAD,CAXH,EAYA,MAAOE,CAAAA,UAAP,CACD,CAfD,CAiBA,cAAeH,CAAAA,iBAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst useResizeObserver = (ref) => {\r\n  const [dimensions, setDimensions] = React.useState(null);\r\n  React.useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nexport default useResizeObserver;\r\n"]},"metadata":{},"sourceType":"module"}